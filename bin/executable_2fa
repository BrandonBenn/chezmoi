#!/usr/bin/env ruby
# frozen_string_literal: true

raise 'Ruby version ~> 2.6 required ' unless RUBY_VERSION >= '2.6'

require 'bundler/inline'
gemfile do
  source 'https://rubygems.org'
  gem 'terminal-table'
  gem 'base32'
end

require 'fileutils'
require 'yaml'
require 'openssl'

KEYCHAIN_DIR = "#{ENV['XDG_CACHE_HOME'] || File.expand_path('~/.cache')}/2fa/".freeze
KEYCHAIN_FILE = "#{KEYCHAIN_DIR}/keychain.yml".freeze

class TwoFAError < StandardError; end

Account = Struct.new(:name, :issuer, :key)

# Converts integet into bytes
class Integer
  def to_bytes(int = self, padding = 8)
    raise ArgumentError, '#to_bytes requires a positive number' unless int.positive?

    result = []
    until int.zero?
      result << (int & 0xFF).chr
      int >>= 8
    end

    result.reverse.join.rjust(padding, 0.chr)
  end
end

def counter(time, t_zero, t_x)
  c_t = (time - t_zero) / t_x
  c_t.floor
end

def hmac(secret, time, digest: 'sha1')
  OpenSSL::HMAC.digest(digest, secret, time.to_bytes)
end

# rubocop:disable Metrics/AbcSize
# https://datatracker.ietf.org/doc/html/rfc4226#section-5.4
def hotp_value(mac, offset)
  (mac[offset].ord & 0x7f)       << 24 |
    (mac[offset + 1].ord & 0xff) << 16 |
    (mac[offset + 2].ord & 0xff) << 8  |
    (mac[offset + 3].ord & 0xff)
end
# rubocop:enable Metrics/AbcSize

def hotp(key, time, digits: 6)
  mac = hmac(Base32.decode(key.upcase), time)
  offset = mac[-1].ord & 0xf
  code = hotp_value mac, offset
  (code % 10.pow(digits)).to_s.rjust(digits, '0')
end

def totp(key, time: Time.now, t_zero: 0, t_x: 30)
  hotp(key, counter(time.to_i, t_zero, t_x))
end

def keychain_dir
  KEYCHAIN_DIR
end

def keychain_file
  KEYCHAIN_FILE
end

def keychain
  @keychain ||=
    if RUBY_VERSION >= '3.1'
      YAML.load_file(keychain_file, permitted_classes: [Account, Symbol]) || []
    else
      YAML.load_file(keychain_file) || []
    end
end

def list_tokens
  raise TwoFAError, 'No entries in keychain' unless keychain&.any?

  $stdout.puts Terminal::Table.new(
    title: 'OTP tokens',
    headings: %w[# code name issuer],
    rows: keychain.map.with_index { |k, i| [i + 1, totp(k.key), k.name, k.issuer] }
  )
end

def add_token_prompt
  account = Account.new
  %w[name issuer key].each do |entry|
    if ENV[entry] || ENV[entry.upcase]
      account.send("#{entry.downcase}=", ENV[entry] || ENV[entry.upcase])
    else
      print "#{entry}: "
      account.send("#{entry}=", $stdin.gets.chomp)
    end
  end

  account
end

def persist_data!(data)
  File.truncate keychain_file, 0
  File.write keychain_file, data.to_yaml
end

def add_token
  account = add_token_prompt
  if keychain.any? { |entry| entry.name == account.name || entry.key == account.key }
    raise TwoFAError, 'Account already exists'
  end

  keychain << account
  persist_data! keychain
end

def remove_token(idx)
  persist_data!(keychain.reject.with_index { |_key, i| i + 1 == idx.to_i })
end

def ensure_file!
  return unless File.exist? keychain_file

  FileUtils.mkdir_p keychain_dir
  FileUtils.touch keychain_file
  true
end

def main
  ensure_file!
  case ARGV.first
  when /^l/ then list_tokens
  when /^a/ then add_token
  when /^d/ then remove_token ARGV[1]
  when /^g/ then puts totp ARGV[1]
  else list_tokens
  end
rescue StandardError => e
  warn e.message
  exit 1
end

main

# seed = "GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ"
# result = totp(seed, time: Time.at(1_111_111_111))
# puts result, result == "050471"
